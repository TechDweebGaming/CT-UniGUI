package io.github.techdweebgaming.ctunigui.zencomponents;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import io.github.techdweebgaming.ctunigui.networking.PacketHandler;
import io.github.techdweebgaming.ctunigui.networking.PacketRefreshClientCache;
import io.github.techdweebgaming.ctunigui.zencomponents.ZenComponentRegistry.ZenComponentEnum;
import net.minecraft.nbt.NBTTagCompound;

public class AutoZSFile implements IZSElement {
	
	private File file; // Only used on server side
	private String fileName;
	private String filePath;
	private List<IZSElement> elements = new ArrayList<IZSElement>();
	
	public AutoZSFile() {};

	public AutoZSFile(File file) throws IOException {
		this.file = file;
		readFromFile();
	}
	
	public AutoZSFile(String path, String fileName) throws IOException {
		this(new File("scripts\\" + path + fileName));
		file.createNewFile();
		FileWriter fw = new FileWriter(file);
		BufferedWriter bw = new BufferedWriter(fw);
		writeHeader(bw);
		bw.close();
		fw.close();
	}
	
	public String getFileName() {
		if(file != null) return file.getName();
		else return fileName;
	}
	
	public String getFilePath() {
		if(file != null) return file.getPath();
		else return filePath;
	}
	
	public void readFromFile() throws IOException{
		boolean inHeader = true;
		boolean inSection = false;
		List<String> sectionContents = new ArrayList<String>();
		
		FileReader fr = new FileReader(file);
		BufferedReader br = new BufferedReader(fr);
		String line;
		while ((line = br.readLine()) != null) {
			if(inHeader) {
				if(line.endsWith("*//")) inHeader = false;
			} else if(inSection) {
				if(line.startsWith("# END SECTION")) {
					inSection = false;
					elements.add(new ZSSection(sectionContents));
					sectionContents.clear();
				} else sectionContents.add(line);
			} else {
				ZenComponentEnum lineEnum = ZenComponentRegistry.getZenComponentEnumFromLine(line);
				if(lineEnum.equals(ZenComponentEnum.SECTION)) {
					inSection = true;
					sectionContents.add(line);
				} else {
					elements.add(ZenComponentRegistry.readFromFile(lineEnum.getComponentClass(), line));
				}
			}
		}
		br.close();
		fr.close();
	}
	
	public void writeToFile() throws IOException {
		FileWriter fw = new FileWriter(file);
		BufferedWriter writer = new BufferedWriter(fw);
		writeHeader(writer);
		for (IZSElement element : elements) {
			element.writeToFile(writer);
		}
		writer.close();
		fw.close();
		PacketHandler.instance.sendToAll(new PacketRefreshClientCache());
	}
	
	public void writeToFile(BufferedWriter writer) {};
	
	private void writeHeader(BufferedWriter writer) throws IOException {
		writer.write("/* This is a special CraftTweaker script file generated by CT-UniGUI.");
		writer.newLine();
		writer.write("This script uses special formatting for easier parsing and editing internally, so please do not edit it manually.");
		writer.newLine();
		writer.write("If you need to edit the scripts, copy them into a manually written script file then delete them from this file via the UI. */");
		writer.newLine();
	}
	
	public NBTTagCompound writeToNBT() {
		NBTTagCompound nbt = new NBTTagCompound();
		int i = 0;
		nbt.setString("key", ZenComponentEnum.FILE.getKey());
		nbt.setString("fileName", this.getFileName());
		nbt.setString("filePath", this.getFilePath());
		for (IZSElement element : elements) {
			nbt.setTag(Integer.toString(i), element.writeToNBT());
			i++;
		}
		nbt.setInteger("count", i);
		return nbt;
	}

	public static AutoZSFile readFromNBT(NBTTagCompound nbt) {
		AutoZSFile file = new AutoZSFile();
		file.fileName = nbt.getString("fileName");
		file.filePath = nbt.getString("filePath");
		for (int i = 0; i < nbt.getInteger("count"); i++) {
			NBTTagCompound tag = (NBTTagCompound) nbt.getTag(Integer.toString(i));
			file.elements.add(ZenComponentRegistry.readFromNBT(ZenComponentRegistry.getZenComponentEnumFromKey(tag.getString("key")).getComponentClass(), (NBTTagCompound) tag));
		}
		return file;
	}
}
